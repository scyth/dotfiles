:let mapleader = ","

:nnoremap <leader>w :w<cr>
:nnoremap <leader>W :w<cr>:bd<cr>
:nnoremap <leader>q :bd<cr>
:nnoremap <leader>Q :bd!<cr>
:nnoremap <leader>,q :bp<cr>:bd! #<cr>:bn<cr>
:nnoremap <leader>t :enew<cr>:e 
:nnoremap <leader>l :bn!<cr>
:nnoremap <leader>. :bp!<cr>
:nnoremap <leader>p :CtrlPBuffer<cr>
:nnoremap <leader>so :OpenSession 
:nnoremap <leader>sc :CloseSession<cr>
inoremap { {}<Esc>i
inoremap ( ()<Esc>i
inoremap " ""<Esc>i
inoremap <C-n> <C-x><C-o>
inoremap <S-Del> <esc>ddi

set nocompatible
set tabstop=4
set shiftwidth=4
set tw=120
set expandtab
set relativenumber
set foldmethod=syntax
set foldnestmax=10
set colorcolumn=120
set nofoldenable
set formatoptions-=t
set formatoptions-=c
set laststatus=2 " Always show statusline
set showcmd
set incsearch
set t_Co=256   " This is may or may not needed.
set background=dark

colorscheme PaperColor
let g:PaperColor_Dark_Override = { 'background' : '#191919' } " another option here is #0d0d0d
" set background=light
" colorscheme github

" fix rendering artifacts"
map ^[OA <up>
map ^[OB <down>
map ^[OC <right>
map ^[OD <left>

let g:airline#extensions#tabline#enabled = 1

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

" paste easily
"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction
if (has("termguicolors"))
 set termguicolors
endif


" --- Spelling corrections for insert mode
"
iabbr heigth height
iabbr widht width

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

" c stuff
augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END
" let &path.="src/include,/usr/include/AL,"
" set includeexpr=substitute(v:fname,'\\.','/','g')


" ===================================================
" ------------   INSTALLED PLUGINS   ----------------
" ===================================================

" ---- Vim Commentary ( github.com/tpope/vim-commentary )
"

" ---- Vim Sensible ( github.com/tpope/vim-sensible )
"

" ---- Vim Misc ( github.com/xolox/vim-misc )
"

" ---- Vim airline ( github.com/vim-airline/vim-airline )
"

" ---- Vim surround ( github.com/tpope/vim-surround )
"

" ---- Vim sessions ( github.com/xolox/vim-session )
"
let g:session_autoload = 'no'
let g:session_autosave = 'yes'

" ---- Vim-Go ( github.com/fatih/vim-go )
"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 0
let g:go_highligth_interfaces = 1
let g:go_highlight_structs = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "gofmt"
let g:go_auto_type_info = 0
let g:go_auto_sameids = 0
set updatetime=100
set completeopt=menu
autocmd FileType go nmap <Leader>i <Plug>(go-info)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <C-j> <Plug>(go-doc)
" autocmd FileType go nmap <F10> <Plug>(go-run)

" ---- Fugitive ( github.com/tpope/vim-fugitive )
"
nmap <leader>gs :Gstatus<cr>
nmap <leader>gbl :Gblame<cr>
nmap <leader>ga :Git add %<cr>:q<cr>
nmap <leader>gco :Git checkout
nmap <leader>grm :Gremove<cr>
nmap <leader>gmv :Gmove
nmap <leader>gcm :Gcommit<cr>
nmap <leader>gd :Gvdiff<cr>

" ---- NERDTree ( github.com/scrooloose/nerdtree )
"

nmap <F10> :NERDTreeToggle<cr>
let g:NERDTreeWinSize = 70

" ---- CtrlP ( github.com/ctrlpvim/ctrlp.vim )
"
let g:ctrlp_working_path_mode = 'w'
set wildignore+=*~
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|mp4|flv|png|jpg|jpeg|mp3|wav|dump|sql|so|dll)$',
  \ }

"
" youcompleteme - no longer used
"
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
" let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

execute pathogen#infect()
filetype plugin indent on
syntax on
